scalar GraphQLDate

type User {
  cust_ID: ID!
  Cust_name: String!
  cust_contact: String
  cust_email: String!
  log_id: ID!
}
type Hub {
  id: Int!
  Name: String!
  StreetNo: String!
  City: String!
  State: String!
  Country: String!
  PostalCode: String!
  isDeleted: Int
  isActive: Int
}
type Parcel{
  id: Int!
  ParcelHeight: Int!
  ParcelLength: Int!
  ParcelWidth: Int!
  ParcelWeight: Int!
  ParcelStatus: String!
  ParcelOrigin: String!
  ParcelDestination: String!
  ParcelSenderName: String!
  ParcelTrackingId: String!
  ParcelCurrentLocation: String!
  
}
type Collections {
  id: Int!
  Name: String!
  StreetNo: String!
  City: String!
  State: String!
  Country: String!
  PostalCode: String!
  isDeleted: Int
  isActive: Int
}
type CollectionRequest {
  id: Int!
  Name: String!
  StreetNo: String!
  City: String!
  State: String!
  Country: String!
  PostalCode: String!
  RequestStatus: String!
  log_id:String
  isDeleted: Int
  isActive: Int
}
input CollectionRequestUpdateInputs {
  id:Int!
  Name: String!
  StreetNo: String!
  City: String!
  State: String!
  Country: String!
  PostalCode: String!
  RequestStatus: String!
}


type Center {
  id: Int!
  Name: String!
  StreetNo: String!
  City: String!
  State: String!
  Country: String!
  PostalCode: String!
  isDeleted: Int
  isActive: Int
}
type ContactUs{
  id:Int!
  Name:String!
  Email:String!
  Message:String!
}
type Login {
  login_Id: ID!
  username: String!
  password: String!
  user_type: String!
  isDeleted: Int
}

input UserInput {
  Cust_name: String!
  cust_contact: String
  cust_email: String!
  username: String!
  password: String!
}
type Employee {
  emp_ID: ID!
  Emp_name: String!
  emp_role: String!
  emp_location: String!
  emp_contact: String
  emp_email: String!
  shift: String
  log_id: ID!
}
input EmployeeInput {
  Emp_name: String!
  emp_role: String!
  emp_location: String!
  emp_contact: String
  emp_email: String!
  shift: String
  username: String!
  password: String!
}
input HubInputs {
  Name: String!
  StreetNo: String!
  City: String!
  State: String!
  Country: String!
  PostalCode: String!
  isDeleted: Int
  isActive: Int
}
input CollectionInputs {
  Name: String!
  StreetNo: String!
  City: String!
  State: String!
  Country: String!
  PostalCode: String!
  isDeleted: Int
  isActive: Int
}
input CollectionRequestInputs {
  Name: String!
  StreetNo: String!
  City: String!
  State: String!
  Country: String!
  PostalCode: String!
  log_id:String
  isDeleted: Int
  isActive: Int
}

input ParcelInput {
  ParcelHeight: Int!
  ParcelLength: Int!
  ParcelWidth: Int!
  ParcelWeight: Int!
  ParcelStatus: String!
  ParcelOrigin: String!
  ParcelDestination: String!
  ParcelSenderName: String!
  ParcelTrackingId: String!
  ParcelCurrentLocation: String!
}
input ContactUsInputs{
  Name:String!
  Email:String!
  Message:String!
}
input CollectionParcelUpdateInputs {
  id:Int!
  ParcelHeight: Int!
  ParcelLength: Int!
  ParcelWidth: Int!
  ParcelWeight: Int!
  ParcelOrigin: String!
  ParcelDestination: String!
  ParcelSenderName: String!
  ParcelCurrentLocation: String!
  
}
input HubUpdateInputs {
  id:Int!
  Name: String!
  StreetNo: String!
  City: String!
  State: String!
  Country: String!
  PostalCode: String!
  isActive: Int
}
input CollectionUpdateInputs {
  id:Int!
  Name: String!
  StreetNo: String!
  City: String!
  State: String!
  Country: String!
  PostalCode: String!
  isActive: Int
}
input HubDeleteInputs {
id:Int!
isDeleted:Int
}
input CollectionDeleteInputs {
id:Int!
isDeleted:Int
}
input CenterInputs {
  Name: String!
  StreetNo: String!
  City: String!
  State: String!
  Country: String!
  PostalCode: String!
  isDeleted: Int
  isActive: Int
}
input RouteInput {
  trackingID: String!
  route: String!
  currentLocation: String!
  origin: String!
  destination: String!
  waypoints: [String!]!
}
type Route {
  id: Int!
  trackingID: String!
  route: String!
  currentLocation: String!
  origin: String!
  destination: String!
  waypoints: [String!]!
}

type Query {
  userList: [User!]!
  hubList: [Hub!]!
  routeDetails(trackingID: ID!): Route
  collectionParcelList: [Parcel!]!
  hubdetailsList (id:Int): [Hub!]!
  getHubDetails: [Hub!]!
  collectionParceldetailsList (id:Int): [Parcel!]!
  collectionList: [Collections!]!
  collectiondetailsList (id:Int): [Collections!]!
  detailsList(id: ID!): User
  login(Email: String!, Password: String!): Login
  checkEmail(Email: String!): User
  checkEmailEmp(Email: String!): Employee
  requestdetails(loginId: String!): [CollectionRequest]
  getEmployeeDetails(Id: ID!): Employee
  getUserDetails(Id: ID!): User
  getUserRequestDetails:[CollectionRequest!]!
  getCollectionRequestDetailsForUpdate (id:Int): [CollectionRequest!]!
}

type Mutation {
  addUser(user: UserInput!): User
  addHub(hub: HubInputs!): Hub
  addContactData(contactData: ContactUsInputs!): ContactUs
  addParcel(parcel: ParcelInput!, route: RouteInput!): Parcel
  addCollection(collection: CollectionInputs!): Collections
  addCollectionRequest(collectionRequest: CollectionRequestInputs!): CollectionRequest
  hubUpdate(hub: HubUpdateInputs!): Hub!  
  hubDelete(hub: HubDeleteInputs!): Hub!
  collectionParcelUpdate(collectionParcel: CollectionParcelUpdateInputs!): Parcel! 
   collectionRequestUpdate(collection: CollectionRequestUpdateInputs!): CollectionRequest!  
  collectionUpdate(collection: CollectionUpdateInputs!): Collections!  
  collectionDelete(collection: CollectionDeleteInputs!): Collections!
  addEmployee(employee: EmployeeInput!): Employee
  updateUser(Id: ID!, Cust_name: String, cust_contact: String, cust_email: String): User

}